[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcpindexer"
version = "0.1.0"
description = "Semantic code search indexer for multiple repositories via MCP"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "George Katechis", email = "gkatechis@gmail.com"}
]
keywords = ["mcp", "code-search", "semantic-search", "embeddings", "indexer"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.14",
]

dependencies = [
    "mcp>=1.0.0",
    "tree-sitter>=0.21.0",
    "tree-sitter-python>=0.21.0",
    "tree-sitter-javascript>=0.21.0",
    "tree-sitter-typescript>=0.21.0",
    "tree-sitter-ruby>=0.21.0",
    "tree-sitter-go>=0.21.0",
    "chromadb>=0.4.22",
    "sentence-transformers>=2.2.2",
    "gitpython>=3.1.40",
    "pydantic>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/gkatechis/mcpIndexer"
Repository = "https://github.com/gkatechis/mcpIndexer"
Issues = "https://github.com/gkatechis/mcpIndexer/issues"
Documentation = "https://github.com/gkatechis/mcpIndexer/blob/master/README.md"

[project.scripts]
mcpindexer = "mcpindexer.cli:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
